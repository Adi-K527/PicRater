name: Deploy Cloud

on:
  push:
    branches:
      - main

env:
  ACCESS_KEY:          ${{ secrets.ACCESS_KEY }}
  SECRET_ACCESS_KEY:   ${{ secrets.SECRET_ACCESS_KEY }}
  JWT_SECRET:          ${{ secrets.JWT_SECRET }}
  DB_STRING:           ${{ secrets.DB_STRING }}
  SSH_PRIVATE_KEY:     ${{ secrets.SSH_PRIVATE_KEY }}
  ACCOUNT_ID:          ${{ secrets.ACCOUNT_ID }}


jobs:
  deploy:
    name: DeployCloud
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id:     ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region:            "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: "^1.3.7"
            terraform_wrapper: false
      
      - name: Deploy cloud
        id: deploy-cloud
        run: |
          cd terraform/aws
          terraform init
          terraform apply -auto-approve -var "access_key=${{ env.ACCESS_KEY }}" -var "secret_access_key=${{ env.SECRET_ACCESS_KEY }}"
          echo "ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.deploy-cloud.outputs.ip }} >> ~/.ssh/known_hosts

          echo "[INFO] Attempting manual SSH"
          scp -i ~/.ssh/id_rsa ec2-user@${{ steps.deploy-cloud.outputs.ip }}:/etc/rancher/k3s/k3s.yaml kubeconfig.yaml

          echo "[INFO] Compying to runner"
          sed -i "s/127.0.0.1/${{ steps.deploy-cloud.outputs.ip }}/" kubeconfig.yaml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG:    ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/user-service-repo:$IMAGE_TAG ./backend/UserService --build-arg Jwt__Secret=${{ env.JWT_SECRET }} --build-arg Db__Connection="${{ env.DB_STRING }}"
          docker push $ECR_REGISTRY/user-service-repo:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/user-service-repo:$IMAGE_TAG" >> $GITHUB_OUTPUT

          docker build -t $ECR_REGISTRY/pic-service-repo:$IMAGE_TAG ./backend/PicService --build-arg Jwt__Secret=${{ env.JWT_SECRET }} --build-arg Db__Connection="${{ env.DB_STRING }}"
          docker push $ECR_REGISTRY/pic-service-repo:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/pic-service-repo:$IMAGE_TAG" >> $GITHUB_OUTPUT

          echo "imagetag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "token=$(aws ecr --region=$REGION get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2)" >> $GITHUB_OUTPUT

      - name: Deploy k8s
        id: deploy-k8s
        run: |
          cd terraform/k8s
          terraform init
          terraform apply -auto-approve -var "image_tag=${{ steps.build-image.outputs.imagetag }}" -var "account_id=${{ secrets.ACCOUNT_ID }}" -var "token=${{ steps.build-image.outputs.token }}" -var "jwt_secret=${{ secrets.JWT_SECRET }}" -var "db_connection=${{ secrets.DB_STRING }}"

      - name: Build Frontend Application
        env:
          VITE_API_URL: ${{ steps.deploy-cloud.outputs.ip }}
        id: build-frontend
        run: |
              cd frontend
              echo "VITE_API_URL=${{ steps.deploy-cloud.outputs.ip }}" > .env
              npm i
              npm run build

      - name: Deploy static site to S3 bucket
        run: aws s3 sync ./frontend/dist/ s3://picrater-pics-8164 --delete